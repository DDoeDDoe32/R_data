install.packages("dplyr")
library(dplyr)                # dplyr 로드
df_new <- df_raw         # 복사본 생성
install.packages("dplyr")  # dplyr 설치
library(dplyr)                # dplyr 로드
# Q2. 자동차 종류에 따라 도시 연비가 다른지 알아보려고 합니다.
# 앞에서 추출한 데이터를 이용해서 class(자동차 종류)가 "suv"인 자동차와 "compact"인 자동차 중
# 어떤 자동차의 cty(도시 연비)가 더 높은지 알아보세요.(filter())
mpg_suv = mpg_df %>% filter(class=="suv")
# Q1. mpg 데이터는 11개 변수로 구성되어 있습니다. 이 중 일부만 추출해서 분석에 활용하려고 합니다.
# mpg 데이터에서 class(자동차 종류), cty(도시 연비) 변수를 추출해 새로운 데이터를 만드세요.
# 새로 만든 데이터의 일부를 출력해서 두 변수로만 구성되어 있는지 확인하세요.(select())
mpg_df = mpg %>% select(class,cty)
# ggplo2의 mpg 데이터를 데이터 프레임 형태로 불러오기
mpg <- as.data.frame(ggplot2::mpg)
# Q1. mpg 데이터는 11개 변수로 구성되어 있습니다. 이 중 일부만 추출해서 분석에 활용하려고 합니다.
# mpg 데이터에서 class(자동차 종류), cty(도시 연비) 변수를 추출해 새로운 데이터를 만드세요.
# 새로 만든 데이터의 일부를 출력해서 두 변수로만 구성되어 있는지 확인하세요.(select())
mpg_df = mpg %>% select(class,cty)
head(mpg_df)
# Q2. 자동차 종류에 따라 도시 연비가 다른지 알아보려고 합니다.
# 앞에서 추출한 데이터를 이용해서 class(자동차 종류)가 "suv"인 자동차와 "compact"인 자동차 중
# 어떤 자동차의 cty(도시 연비)가 더 높은지 알아보세요.(filter())
mpg_suv = mpg_df %>% filter(class=="suv")
mpg_compact = mpg_df %>% filter(class=="compact")
mean(mpg_suv$cty)
mean(mpg_compact$cty)
exam %>% arrange(math)         # math 오름차순 정렬
exam = read.csv("GitHub/R_data/data/csv_exam.csv")
exam = read.csv("GitHub/R_data/data/csv_exam.csv")
exam = read.csv("/GitHub/R_data/data/csv_exam.csv")
exam = read.csv("GitHub/R_data/data/csv_exam.csv")
exam %>% arrange(math)         # math 오름차순 정렬
exam = read.csv("GitHub/R_data/data/csv_exam.csv")
exam %>% arrange(math)         # math 오름차순 정렬
exam = read.csv("G/R_data/data/csv_exam.csv")
exam = read.csv("R_data/data/csv_exam.csv")
pwd
exam = read.csv("../R_data/data/csv_exam.csv")
exam = read.csv("../data/csv_exam.csv")
exam %>% arrange(math)         # math 오름차순 정렬
exam %>% arrange(desc(math))   # math 내림차순 정렬
exam %>% arrange(class, math)  # class 및 math 오름차순 정렬
mpg %>% filter(manufacturer=="audi")
mpg %>%
filter(manufacturer=="audi") %>%
arrange(desc(hwy))
head(5)
mpg %>%
filter(manufacturer=="audi") %>%
arrange(desc(hwy)) %>%
head(5)
exam %>%
mutate(total = math + english + science,         # 총합 변수 추가
mean = (math + english + science)/3) %>%  # 총평균 변수 추가
arrange(total) %>%
head                                             # 일부 추출
# 데이터는 복사본 대신 mpg 원본을 이용하세요.
mpg %>% mutatie(total = cty + hwy,
mean = total/2)
# 데이터는 복사본 대신 mpg 원본을 이용하세요.
mpg %>% mutate(total = cty + hwy,
mean = total/2)
arrange(desc(mean)
# 데이터는 복사본 대신 mpg 원본을 이용하세요.
mpg %>% mutate(total = cty + hwy,
mean = total/2) %>%
arrange(desc(mean))
# 데이터는 복사본 대신 mpg 원본을 이용하세요.
mpg %>% mutate(total = cty + hwy,
mean = total/2) %>%
arrange(desc(mean)) %>%
head
# 데이터는 복사본 대신 mpg 원본을 이용하세요.
mpg %>% mutate(total = cty + hwy,
mean = total/2) %>%
arrange(desc(mean)) %>%
head(3)
exam %>% summarise(mean_math = mean(math))  # math 평균 산출
exam %>%
group_by(class) %>%                   # class별로 분리
summarise(mean_math = mean(math))     # math 평균 산출
exam %>%
group_by(class) %>%                   # class별로 분리
summarise(mean_math = mean(math),     # math 평균
sum_math = sum(math),       # math 합계
median_math = median(math), # math 중앙값
n = n())                    # 학생 수
mpg %>%
group_by(manufacturer, drv) %>%       # 회사별, 구동방식별 분리
summarise(mean_cty = mean(cty)) %>%   # cty 평균 산출
head(10)                              # 일부 출력
mpg %>%
group_by(manufacturer, drv) %>%       # 회사별, 구동방식별 분리
summarise(mean_cty = mean(cty)) %>%   # cty 평균 산출
head(10)                              # 일부 출력
mpg %>%
group_by(manufacturer) %>%           # 회사별로 분리
filter(class == "suv") %>%           # suv 추출
mutate(tot = (cty+hwy)/2) %>%        # 통합 연비 변수 생성
summarise(mean_tot = mean(tot)) %>%  # 통합 연비 평균 산출
arrange(desc(mean_tot)) %>%          # 내림차순 정렬
head(5)                              # 1~5위까지 출력
# >>> mpg 데이터를 이용해서 분석 문제를 해결해 보세요.
# Q1. mpg 데이터의 class는 "suv", "compact" 등 자동차를 특징에 따라 일곱 종류로 분류한 변수입니다.
# 어떤 차종의 연비가 높은지 비교해보려고 합니다. class별 cty 평균을 구해보세요.
mpg %>%
group_by(class) %>%
summarise(cty)
# >>> mpg 데이터를 이용해서 분석 문제를 해결해 보세요.
# Q1. mpg 데이터의 class는 "suv", "compact" 등 자동차를 특징에 따라 일곱 종류로 분류한 변수입니다.
# 어떤 차종의 연비가 높은지 비교해보려고 합니다. class별 cty 평균을 구해보세요.
mpg %>%
group_by(class) %>%
summarise(mean(cty))
# >>> mpg 데이터를 이용해서 분석 문제를 해결해 보세요.
# Q1. mpg 데이터의 class는 "suv", "compact" 등 자동차를 특징에 따라 일곱 종류로 분류한 변수입니다.
# 어떤 차종의 연비가 높은지 비교해보려고 합니다. class별 cty 평균을 구해보세요.
mpg %>%
group_by(class) %>%
summarise(mean_cty=mean(cty))
# >>> mpg 데이터를 이용해서 분석 문제를 해결해 보세요.
# Q1. mpg 데이터의 class는 "suv", "compact" 등 자동차를 특징에 따라 일곱 종류로 분류한 변수입니다.
# 어떤 차종의 연비가 높은지 비교해보려고 합니다. class별 cty 평균을 구해보세요.
mpg %>%
group_by(class) %>%
summarise(mean_cty = mean(cty))
# Q2. 앞 문제의 출력 결과는 class 값 알파벳 순으로 정렬되어 있습니다.
# 어떤 차종의 도시 연비가 높은지 쉽게 알아볼 수 있도록 cty 평균이 높은 순으로 정렬해 출력하세요.
mpg %>%
group_by(class) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty))
head(3)
# Q3. 어떤 회사 자동차의 hwy(고속도로 연비)가 가장 높은지 알아보려고 합니다.
# hwy 평균이 가장 높은 회사 세 곳을 출력하세요.
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
arrange(desc(mean_hwy)) %>%
head(3)
# Q4. 어떤 회사에서 "compact"(경차) 차종을 가장 많이 생산하는지 알아보려고 합니다.
# 각 회사별 "compact" 차종 수를 내림차순으로 정렬해 출력하세요.
mpg_ %>%
filter(class="compact") %>%
group_by(manufacturer) %>%
summarise(n = n()) %>%
arrange(desc(n))
# Q4. 어떤 회사에서 "compact"(경차) 차종을 가장 많이 생산하는지 알아보려고 합니다.
# 각 회사별 "compact" 차종 수를 내림차순으로 정렬해 출력하세요.
mpg %>%
filter(class="compact") %>%
group_by(manufacturer) %>%
summarise(n = n()) %>%
arrange(desc(n))
# Q4. 어떤 회사에서 "compact"(경차) 차종을 가장 많이 생산하는지 알아보려고 합니다.
# 각 회사별 "compact" 차종 수를 내림차순으로 정렬해 출력하세요.
mpg %>%
filter(class=="compact") %>%
group_by(manufacturer) %>%
summarise(n = n()) %>%
arrange(desc(n))
# 중간고사 데이터 생성
test1 <- data.frame(id = c(1, 2, 3, 4, 5),
midterm = c(60, 80, 70, 90, 85))
# 기말고사 데이터 생성
test2 <- data.frame(id = c(1, 2, 3, 4, 5),
final = c(70, 83, 65, 95, 80))
test1  # test1 출력
test2  # test2 출력
total <- left_join(test1, test2, by = "id")  # id 기준으로 합쳐서 total에 할당
total                                        # total 출력
# - 각반학생 명단에 담임교사 명단 추가하기
name <- data.frame(class = c(1, 2, 3, 4, 5),
teacher = c("kim", "lee", "park", "choi", "jung"))
name
exam_new
exam_new <- left_join(exam, name, by = "class")
exam_new
install.packages('ggplot2')
install.packages("ggplot2")
# 학생 1~5번 시험 데이터 생성
group_a <- data.frame(id = c(1, 2, 3, 4, 5),
test = c(60, 80, 70, 90, 85))
# 학생 6~10번 시험 데이터 생성
group_b <- data.frame(id = c(6, 7, 8, 9, 10),
test = c(70, 83, 65, 95, 80))
group_a  # group_a 출력
group_b  # group_b 출력
group_all <- bind_rows(group_a, group_b)  # 데이터 합쳐서 group_all에 할당
group_all                                 # group_all 출력
library(dplyr)
group_all <- bind_rows(group_a, group_b)  # 데이터 합쳐서 group_all에 할당
group_all                                 # group_all 출력
# 우선 이 정보를 이용해서 연료와 가격으로 구성된 데이터 프레임을 만들어 보세요.
fuel <- data.frame(fl = c("c", "d", "e", "p", "r"),
price_fl = c(2.35, 2.38, 2.11, 2.76, 2.22),
stringsAsFactors = F)
# Q1. mpg 데이터에는 연료 종류를 나타낸 fl 변수는 있지만 연료 가격을 나타낸 변수는 없습니다.
# 위에서 만든 fuel 데이터를 이용해서 mpg 데이터에 price_fl(연료 가격) 변수를 추가하세요.
mpg = left_join(mpg,fuel,by="fl")
# Q2. 연료 가격 변수가 잘 추가됐는지 확인하기 위해서 model, fl, price_fl 변수를 추출해
# 앞부분 5행을 출력해 보세요.
mpg %>%
select(model,fl,price_fl) %>%
head(5)
midwest = midwest %>%
mutate(ration_child=(poptotal-popadults)/poptotal * 100)
# 문제1. popadults는 해당 지역의 성인 인구, poptotal은 전체 인구를 나타냅니다. midwest 데이터에 '전체 인구 대비 미성년 인구 백분율' 변수를 추가하세요.
midwest = as.data.frame(ggplot2::midwest)
midwest = midwest %>%
mutate(ration_child=(poptotal-popadults)/poptotal * 100)
midwest
midwest$ration_child
# 문제2. 미성년 인구 백분율이 가장 높은 상위 5개 county(지역)의 미성년 인구 백분율을 출력하세요.
midwest %>%
arrange(desc(ration_child)) %>%
select(county)
# 문제2. 미성년 인구 백분율이 가장 높은 상위 5개 county(지역)의 미성년 인구 백분율을 출력하세요.
midwest %>%
arrange(desc(ration_child)) %>%
select(county,ration_child) %>%
head(5)
# 분류 기준
# large 40% 이상
# middle 30% ~ 40% 미만
# small 30% 미만
midwest = midwest %>%
mutate(ration_child_grade = ifelse(ration_child>=40,"large",
ifelse(ration_child>=30,"middle","small")))
table(midwest)
qplot(midwest)
table(midwest$ration_child)
table(midwest$ration_child)
# 분류 기준
# large 40% 이상
# middle 30% ~ 40% 미만
# small 30% 미만
midwest = midwest %>%
mutate(ration_child_grade = ifelse(ration_child>=40,"large",
ifelse(ration_child>=30,"middle","small")))
table(midwest$ration_child)
table(midwest$ration_child_grade)
# 분류 기준
# large 40% 이상
# middle 30% ~ 40% 미만
# small 30% 미만
midwest = midwest %>%
mutate(ration_child_grade = ifelse(ration_child>=40,"large",
ifelse(ration_child>=30,"middle","small")))
table(midwest$ration_child_grade)
midwest = midwest %>%
mutate(ration_asian = popasian/poptotal*100) %>%
arrange(ration_asian) %>%
select(state, country, ration_asian) %>%
head(10)
midwest = midwest %>%
mutate(ration_asian = popasian/poptotal*100) %>%
arrange(ration_asian) %>%
select(state, county, ration_asian) %>%
head(10)
midwest
df <- data.frame(gender = c("M", "F", NA, "M", "F"),
score = c(5, 4, 3, 4, NA))
df
is.na(df)               # 결측치 확인
table(is.na(df))        # 결측치 빈도 출력
table(is.na(df$gender))    # gender 결측치 빈도 출력
table(is.na(df$score))      # score 결측치 빈도 출력
#결측치가 포함된 데이터는 함수 적용시 연산되지 못하고 NA값 출력한다.
mean(df$score)  # 평균 산출
sum(df$score)   # 합계 산출
df %>% filter(is.na(score))   # score가 NA인 데이터만 출력
df %>% filter(!is.na(score))  # score 결측치 제거
#결측치가 포함된 데이터는 함수 적용시 연산되지 못하고 NA값 출력한다.
mean(df$score)  # 평균 산출
sum(df$score)   # 합계 산출
#결측치가 포함된 데이터는 함수 적용시 연산되지 못하고 NA값 출력한다.
mean(df$score)  # 평균 산출
sum(df$score)   # 합계 산출
mean(df$score, na.rm = T)  # 결측치 제외하고 평균 산출
sum(df$score, na.rm = T)   # 결측치 제외하고 합계 산출
sum(df$score, na.rm = T)   # 합계 산출
mean(df$score, na.rm = T)  # 평균 산출
sum(df$score, na.rm = T)   # 합계 산출
exam <- read.csv("data/03/csv_exam.csv")  # 데이터 불러오기
exam <- read.csv("../data/csv_exam.csv")  # 데이터 불러오기
exam[c(3, 8, 15), "math"] <- NA   # 3, 8, 15행의 math에 NA 할당
exam
exam %>% summarise(mean_math = mean(math))  # math 평균 산출
# math 결측치 제외하고 평균 산출
exam %>% summarise(mean_math = mean(math, na.rm = T))
exam %>% summarise(mean_math = mean(math, na.rm = T),      # 평균 산출
sum_math = sum(math, na.rm = T),        # 합계 산출
median_math = median(math, na.rm = T))  # 중앙값 산출
# - 결측치를 제거 하는 대신 다른 값으로 대체할 수 있다.
mean(exam$math, na.rm = T) # 결측치 제외하고 math 평균 산출
exam$math <- ifelse(is.na(exam$math), 55, exam$math)  # math가 NA면 55로 대체
table(is.na(exam$math))                               # 결측치 빈도표 생성
exam                                                  # 출력
mean(exam$math)                                       # math 평균 산출
mpg <- as.data.frame(ggplot2::mpg)           # mpg 데이터 불러오기
mpg[c(65, 124, 131, 153, 212), "hwy"] <- NA  # NA 할당하기
# - 결측치가 들어있는 mpg 데이터를 활용해서 문제를 해결해보세요.
# Q1. drv(구동방식)별로 hwy(고속도로 연비) 평균이 어떻게 다른지 알아보려고 합니다.
# 분석을 하기 전에 우선 두 변수에 결측치가 있는지 확인해야 합니다.
# drv 변수와 hwy 변수에 결측치가 몇 개 있는지 알아보세요.
table(is.na(mpg$drv))
table(is.na(mpg$hwy))
# Q2. filter()를 이용해 hwy 변수의 결측치를 제외하고,
# 어떤 구동방식의 hwy 평균이 높은지 알아보세요. 하나의 dplyr 구문으로 만들어야 합니다.
mpg %>%
filter(!is.na(hwy)) %>%
group_by(drv) %>%
summarise(mean_hwy=mean(hwy))
outlier <- data.frame(gender = c(1, 2, 1, 3, 2, 1),
score = c(5, 4, 3, 4, 2, 6))
outlier
table(outlier$gender)
table(outlier$score)
# gender가 3이면 NA 할당
outlier$gender <- ifelse(outlier$gender == 3, NA, outlier$gender)
outlier
# score가 5보다 크면 NA 할당
outlier$score <- ifelse(outlier$score > 5, NA, outlier$score)
outlier
outlier %>%
filter(!is.na(gender) & !is.na(score)) %>%
group_by(gender) %>%
summarise(mean_score = mean(score))
boxplot(mpg$hwy) #위 상자그림과 같다.
boxplot(mpg$hwy)$status
boxplot(mpg$hwy)$stats
mpg %>%
group_by(drv) %>%
summarise(mean_hwy = mean(hwy, na.rm = T))
# 12~37 벗어나면 NA 할당
mpg$hwy <- ifelse(mpg$hwy < 12 | mpg$hwy > 37, NA, mpg$hwy)
# 결측치 확인
table(is.na(mpg$hwy))
mpg %>%
group_by(drv) %>%
summarise(mean_hwy = mean(hwy, na.rm = T))
mpg <- as.data.frame(ggplot2::mpg)                  # mpg 데이터 불러오기
mpg[c(10, 14, 58, 93), "drv"] <- "k"                # drv 이상치 할당
mpg[c(29, 43, 129, 203), "cty"] <- c(3, 4, 39, 42)  # cty 이상치 할당
# - 이상치가 들어있는 mpg 데이터를 활용해서 문제를 해결해보세요.
# - 구동방식별로 도시 연비가 다른지 알아보려고 합니다.
# - 분석을 하려면 우선 두 변수에 이상치가 있는지 확인하려고 합니다.
# Q1. drv에 이상치가 있는지 확인하세요. 이상치를 결측 처리한 다음 이상치가 사라졌는지 확인하세요.
# 결측 처리 할 때는 %in% 기호를 활용하세요.
table(drv)
# - 이상치가 들어있는 mpg 데이터를 활용해서 문제를 해결해보세요.
# - 구동방식별로 도시 연비가 다른지 알아보려고 합니다.
# - 분석을 하려면 우선 두 변수에 이상치가 있는지 확인하려고 합니다.
# Q1. drv에 이상치가 있는지 확인하세요. 이상치를 결측 처리한 다음 이상치가 사라졌는지 확인하세요.
# 결측 처리 할 때는 %in% 기호를 활용하세요.
table(mpg$drv)
mpg$drv = ifelse(mpg$drv %in% c("4","f","r"),mpg$drv,NA)
# Q2. 상자 그림을 이용해서 cty에 이상치가 있는지 확인하세요.
# 상자 그림의 통계치를 이용해 정상 범위를 벗어난 값을 결측 처리한 후 다시 상자 그림을 만들어
# 이상치가 사라졌는지 확인하세요.
boxplot(mpg$cty)
# Q2. 상자 그림을 이용해서 cty에 이상치가 있는지 확인하세요.
# 상자 그림의 통계치를 이용해 정상 범위를 벗어난 값을 결측 처리한 후 다시 상자 그림을 만들어
# 이상치가 사라졌는지 확인하세요.
boxplot(mpg$cty)$stats
mpg$cty=ifelse(mpg$cty<9 | mpg$cty>26, NA, mpg$cty)
# Q3. 두 변수의 이상치를 결측처리 했으니 이제 분석할 차례입니다.
# 이상치를 제외한 다음 drv별로 cty 평균이 어떻게 다른지 알아보세요.
# 하나의 dplyr 구문으로 만들어야 합니다.
mpg %>%
group_by(drv) %>%
summarise(mean_cty=mean(cty))
# Q3. 두 변수의 이상치를 결측처리 했으니 이제 분석할 차례입니다.
# 이상치를 제외한 다음 drv별로 cty 평균이 어떻게 다른지 알아보세요.
# 하나의 dplyr 구문으로 만들어야 합니다.
mpg %>%
group_by(drv) %>%
summarise(mean_cty=mean(cty, na.rm=T))
# Q3. 두 변수의 이상치를 결측처리 했으니 이제 분석할 차례입니다.
# 이상치를 제외한 다음 drv별로 cty 평균이 어떻게 다른지 알아보세요.
# 하나의 dplyr 구문으로 만들어야 합니다.
mpg %>%
group_by(drv) %>%
summarise(mean_cty=mean(cty, na.rm=F))
# Q3. 두 변수의 이상치를 결측처리 했으니 이제 분석할 차례입니다.
# 이상치를 제외한 다음 drv별로 cty 평균이 어떻게 다른지 알아보세요.
# 하나의 dplyr 구문으로 만들어야 합니다.
mpg %>%
group_by(drv) %>%
summarise(mean_cty=mean(cty, na.rm=))
# Q3. 두 변수의 이상치를 결측처리 했으니 이제 분석할 차례입니다.
# 이상치를 제외한 다음 drv별로 cty 평균이 어떻게 다른지 알아보세요.
# 하나의 dplyr 구문으로 만들어야 합니다.
mpg %>%
group_by(drv) %>%
summarise(mean_cty=mean(cty, na.rm=T))
group_by(drv) %>%
summarise(mean_cty=mean(cty, na.rm=T))
# Q3. 두 변수의 이상치를 결측처리 했으니 이제 분석할 차례입니다.
# 이상치를 제외한 다음 drv별로 cty 평균이 어떻게 다른지 알아보세요.
# 하나의 dplyr 구문으로 만들어야 합니다.
mpg %>%
filter(!is,na(drv) | !is.na(cty))
# Q3. 두 변수의 이상치를 결측처리 했으니 이제 분석할 차례입니다.
# 이상치를 제외한 다음 drv별로 cty 평균이 어떻게 다른지 알아보세요.
# 하나의 dplyr 구문으로 만들어야 합니다.
mpg %>%
filter(!is,na(drv) | !is.na(cty)) %>%
group_by(drv) %>%
summarise(mean_cty=mean(cty, na.rm=T))
# Q3. 두 변수의 이상치를 결측처리 했으니 이제 분석할 차례입니다.
# 이상치를 제외한 다음 drv별로 cty 평균이 어떻게 다른지 알아보세요.
# 하나의 dplyr 구문으로 만들어야 합니다.
mpg %>%
filter(!is.na(drv) | !is.na(cty)) %>%
group_by(drv) %>%
summarise(mean_cty=mean(cty, na.rm=T))
# Q3. 두 변수의 이상치를 결측처리 했으니 이제 분석할 차례입니다.
# 이상치를 제외한 다음 drv별로 cty 평균이 어떻게 다른지 알아보세요.
# 하나의 dplyr 구문으로 만들어야 합니다.
mpg %>%
filter(!is.na(drv) | !is.na(cty))
# Q3. 두 변수의 이상치를 결측처리 했으니 이제 분석할 차례입니다.
# 이상치를 제외한 다음 drv별로 cty 평균이 어떻게 다른지 알아보세요.
# 하나의 dplyr 구문으로 만들어야 합니다.
mpg %>%
filter(!is.na(drv) | !is.na(cty)) %>%
group_by(drv) %>%
summarise(mean_cty=mean(cty, na.rm=T))
# Q3. 두 변수의 이상치를 결측처리 했으니 이제 분석할 차례입니다.
# 이상치를 제외한 다음 drv별로 cty 평균이 어떻게 다른지 알아보세요.
# 하나의 dplyr 구문으로 만들어야 합니다.
mpg %>%
filter(!is.na(drv) & !is.na(cty)) %>%
group_by(drv) %>%
summarise(mean_cty=mean(cty, na.rm=T))
# 막대차트 데이터 생성
chart_data <- c(305,450, 320, 460, 330, 480, 380, 520)
names(chart_data) <- c("2014 1분기","2015 1분기","2014 2분기","2015 2분기","2014 3분기","2015 3분기","2014 4분기","2015 4분기")
str(chart_data)
chart_data
# 세로 막대 차트
barplot(chart_data, ylim=c(0,600),
col=rainbow(8), main ="2014년도 vs 2015년도 분기별 매출현황 비교")
help("barplot")
# 가로축과 세로축 레이블 추가
barplot(chart_data, ylim=c(0,600), ylab="매출액(단위:만원)", xlab="년도별 분기현황",
col=rainbow(8), main ="2014년도 vs 2015년도 분기별 매출현황 비교")
# 세로 막대 차트
barplot(chart_data, ylim=c(0,600),
col=rainbow(8), main ="2014년도 vs 2015년도 분기별 매출현황 비교")
# 세로 막대 차트
barplot(chart_data, ylim=c(0,600),
col=rainbow(8), main ="2014년도 vs 2015년도 분기별 매출현황 비교")
# 가로축과 세로축 레이블 추가
barplot(chart_data, ylim=c(0,600), ylab="매출액(단위:만원)", xlab="년도별 분기현황",
col=rainbow(8), main ="2014년도 vs 2015년도 분기별 매출현황 비교")
barplot(chart_data, xlim=c(0,600), horiz=TRUE,
xlab="매출액(단위:만원)", ylab="년도별 분기현황",
col=rainbow(8),
main ="2014년도 vs 2015년도 분기별 매출현황 비교")
#가로 막대 차트
barplot(chart_data, xlim=c(0,600), horiz=TRUE,
xlab="매출액(단위:만원)", ylab="년도별 분기현황",
col=rainbow(8),
main ="2014년도 vs 2015년도 분기별 매출현황 비교")
#가로 막대 차트
barplot(chart_data, xlim=c(0,600), horiz=TRUE,
xlab="매출액(단위:만원)", ylab="년도별 분기현황",
col=rainbow(8),
space =1,
main ="2014년도 vs 2015년도 분기별 매출현황 비교")
#가로 막대 차트
barplot(chart_data, xlim=c(0,600), horiz=TRUE,
xlab="매출액(단위:만원)", ylab="년도별 분기현황",
col=rainbow(8),
space =1, cex.names = 0.5,
main ="2014년도 vs 2015년도 분기별 매출현황 비교")
#가로 막대 차트
barplot(chart_data, xlim=c(0,600), horiz=TRUE,
xlab="매출액(단위:만원)", ylab="년도별 분기현황",
col=rainbow(8),
main ="2014년도 vs 2015년도 분기별 매출현황 비교")
barplot(chart_data, xlim=c(0,600), horiz=TRUE,
xlab="매출액(단위:만원)", ylab="년도별 분기현황",
col=rainbow(8),space = 1, cex.names = 0.8,
main ="2014년도 vs 2015년도 분기별 매출현황 비교")
# red와 blue 색상 4회 반복
barplot(chart_data, xlim=c(0,600), horiz=TRUE,
xlab="매출액(단위:만원)", ylab="년도별 분기현황",
space = 2, cex.names = 0.8, col=rep(c(2, 4),4))
# red와 green 색상 4회 반복
barplot(chart_data, xlim=c(0,600), horiz=TRUE,
xlab="매출액(단위:만원)", ylab="년도별 분기현황",
space = 2, cex.names = 0.8, col=rep(c("red","green"),4) )
# VADeaths 가져오고, 구조 확인
data(VADeaths)
VADeaths
str(VADeaths)
class(VADeaths)  # 자료구조 확인
mode(VADeaths) #자료형 확인
# 개별차트 그리기
#inset=0.1 등으로 legend의 위치를 이동할 수 있다.
barplot(VADeaths, beside=T,col=rainbow(5),
main="미국 버지니아주 하위계층 사망비율")
legend("topright" ,c("50-54","55-59","60-64","65-69","70-74"), cex=0.8, fill=rainbow(5))
# 누적 차트 그리기
barplot(VADeaths, beside=F,col=rainbow(5))
title(main ="미국 버지니아주 하위계층 사망비율",font.main=4)
legend("topright", c("50-54","55-59","60-64","65-69","70-74"), cex=0.8, fill=rainbow(5) )
